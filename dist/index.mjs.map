{"version":3,"sources":["../src/parse.ts"],"sourcesContent":["import { XMLParser } from \"fast-xml-parser\";\r\n\r\nexport async function parseFromUrl(url: string, config?: RequestInit) {\r\n    if (!/(^http(s?):\\/\\/[^\\s$.?#].[^\\s]*)/i.test(url)) return null;\r\n\r\n    const data = await fetch(url, config).then(r => r.text());\r\n    return parseFromString(data);\r\n}\r\n\r\nexport function parseFromString(data: string) {\r\n    const xml = new XMLParser({\r\n        attributeNamePrefix: \"\",\r\n        textNodeName: \"$text\",\r\n        ignoreAttributes: false,\r\n    });\r\n\r\n    const result = xml.parse(data);\r\n\r\n    let channel = result.rss && result.rss.channel ? result.rss.channel : result.feed;\r\n    if (Array.isArray(channel)) channel = channel[0];\r\n\r\n    const rss = {\r\n        title: channel.title ?? \"\",\r\n        description: channel.description ?? \"\",\r\n        link: channel.link && channel.link.href ? channel.link.href : channel.link,\r\n        image: channel.image ? channel.image.url : channel[\"itunes:image\"] ? channel[\"itunes:image\"].href : \"\",\r\n        category: channel.category || [],\r\n        items: [],\r\n    };\r\n\r\n    let items = channel.item || channel.entry || [];\r\n    if (items && !Array.isArray(items)) items = [items];\r\n\r\n    for (let i = 0; i < items.length; i++) {\r\n        const val = items[i];\r\n        const media = {};\r\n\r\n        const obj = {\r\n            id: val.guid && val.guid.$text ? val.guid.$text : val.id,\r\n            title: val.title && val.title.$text ? val.title.$text : val.title,\r\n            description: val.summary && val.summary.$text ? val.summary.$text : val.description,\r\n            link: val.link && val.link.href ? val.link.href : val.link,\r\n            author: val.author && val.author.name ? val.author.name : val[\"dc:creator\"],\r\n            published: val.created ? Date.parse(val.created) : val.pubDate ? Date.parse(val.pubDate) : Date.now(),\r\n            created: val.updated ? Date.parse(val.updated) : val.pubDate ? Date.parse(val.pubDate) : val.created ? Date.parse(val.created) : Date.now(),\r\n            category: val.category || [],\r\n            content: val.content && val.content.$text ? val.content.$text : val[\"content:encoded\"],\r\n            enclosures: val.enclosure ? (Array.isArray(val.enclosure) ? val.enclosure : [val.enclosure]) : [],\r\n        };\r\n\r\n        [\"content:encoded\", \"podcast:transcript\", \"itunes:summary\", \"itunes:author\", \"itunes:explicit\", \"itunes:duration\", \"itunes:season\", \"itunes:episode\", \"itunes:episodeType\", \"itunes:image\"].forEach((s) => {\r\n            if (val[s]) obj[s.replace(\":\", \"_\")] = val[s];\r\n        });\r\n\r\n        if (val[\"media:thumbnail\"]) {\r\n            Object.assign(media, { thumbnail: val[\"media:thumbnail\"] });\r\n            obj.enclosures.push(val[\"media:thumbnail\"]);\r\n        }\r\n\r\n        if (val[\"media:content\"]) {\r\n            Object.assign(media, { thumbnail: val[\"media:content\"] });\r\n            obj.enclosures.push(val[\"media:content\"]);\r\n        }\r\n\r\n        if (val[\"media:group\"]) {\r\n            if (val[\"media:group\"][\"media:title\"]) obj.title = val[\"media:group\"][\"media:title\"];\r\n\r\n            if (val[\"media:group\"][\"media:description\"]) obj.description = val[\"media:group\"][\"media:description\"];\r\n\r\n            if (val[\"media:group\"][\"media:thumbnail\"]) obj.enclosures.push(val[\"media:group\"][\"media:thumbnail\"].url);\r\n\r\n            if (val[\"media:group\"][\"media:content\"]) obj.enclosures.push(val[\"media:group\"][\"media:content\"]);\r\n        }\r\n\r\n        Object.assign(obj, { media });\r\n\r\n        rss.items.push(obj);\r\n    }\r\n\r\n    return rss;\r\n};\r\n"],"mappings":"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","names":[]}